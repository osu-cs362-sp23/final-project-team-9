require("whatwg-fetch");
const rest = require("msw").rest;
const setupServer = require("msw/node").setupServer;
const fs = require("fs");

// import function
const generateChartImg = require('../generateChartImg');
const apiImage = fs.readFileSync('src/__mocks__/testImage.png');

const server = setupServer(
    rest.post(
        'https://quickchart.io/chart',
        function(req, res, ctx){
            console.log("=== Fake API Called");
            ctx.set('Content-Type', 'image/png');
            return res(ctx.body(apiImage));
        }
    )
)

beforeAll(function(){
    server.listen();
});

afterAll(function (){
    server.close();
});

describe('generateChartImg tests', ()=>{

    /* Each call to this function consists of 6 parameters:
    * type: string indicating type of chart must be: "line", "scatter", or "bar"
    * data: array of x,y data pairs in format [{x: #, y: #}, {x: #, y: #}]
    * xLabel: string indicating label for X axis
    * yLabel: guess
    * title: OPTIONAL string indicating title of chart, if none no title
    * color: optinal string indicating color of chart, can be any valid css color
    *
    * returns a promis that resolves to a URL representing the chart image 
    * generated by QuickChartAPI based on input
    * -Ave
    */
   
   const apiBytes = apiImage.buffer;

   const xLabel = 'xLabel';
   const yLabel = 'yLabel';
   
   describe('line tests', () => {
       /* This section will serve as the place to do all tests 
         * where the type is "line"
         * -Ave
         */

        const type = "line"

        test('standard inputs', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });

        test('empty array of points', async function(){
            const data = [];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
            
        test('flip-flopped values in array', async function() {
            const data = [{y: 3, x: 4}, {y: 7, x: 1}, {y: 1, x: 2}, {y: 15, x: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('negative x values in array', async function() {
            const data = [{x: -3, y: 4}, {x: -7, y: 1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('negative y values in array', async function() {
            const data = [{x: 3, y: -4}, {x: 7, y: -1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });

        test('using valid css color string', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const color = 'red';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, undefined, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });

        test('using color in hex format', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const color = '#00ff00';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, undefined, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });

        test('using color and title', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const title = 'Title';
            const color = 'blue';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, title, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });

        test('using title but no color', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const title = 'Title';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, title);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
    });

    describe('scatter tests', ()=>{
        /* This section will serve as the place to do all tests 
         * where the type is "scatter"
         * -Ave
         */

        const type = "scatter";

        test('standard inputs', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('empty array of points', async function(){
            const data = [];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('flip-flopped values in array', async function() {
            const data = [{y: 3, x: 4}, {y: 7, x: 1}, {y: 1, x: 2}, {y: 15, x: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('negative x values in array', async function() {
            const data = [{x: -3, y: 4}, {x: -7, y: 1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('negative y values in array', async function() {
            const data = [{x: 3, y: -4}, {x: 7, y: -1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using valid css color string', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const color = 'red';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, undefined, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using color in hex format', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const color = '#00ff00';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, undefined, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using color and title', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const title = 'Title';
            const color = 'blue';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, title, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using title but no color', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const title = 'Title';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, title);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
        

    });

    describe('bar tests', ()=>{
        /* This section will serve as the place to do all tests 
         * where the type is "bar"
         * -Ave
         */

        const type = "bar";
        
        test('standard inputs', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('empty array of points', async function(){
            const data = [];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('flip-flopped values in array', async function() {
            const data = [{y: 3, x: 4}, {y: 7, x: 1}, {y: 1, x: 2}, {y: 15, x: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('negative x values in array', async function() {
            const data = [{x: -3, y: 4}, {x: -7, y: 1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('negative y values in array', async function() {
            const data = [{x: 3, y: -4}, {x: 7, y: -1}, {x: 1, y: 2}, {x: 15, y: 12}];
            const resultURL = await generateChartImg(type, data, xLabel, yLabel);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using valid css color string', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const color = 'red';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, undefined, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using color in hex format', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const color = '#00ff00';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, undefined, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using color and title', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const title = 'Title';
            const color = 'blue';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, title, color);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
    
        test('using title but no color', async function(){
            const data = [{x: 3, y: 4}, {x: 7, y: 1}];
            const title = 'Title';
            const resultURL = await generateChartImg(type, data, xLabel, yLabel, title);
            let fetchData = await fetch(resultURL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'image/png'
                }
            });
            resultBlob = await fetchData.blob();
            resultBytes = await resultBlob.arrayBuffer();
            expect(resultBytes).toEqual(apiBytes);
        });
 
    });
});